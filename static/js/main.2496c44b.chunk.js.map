{"version":3,"sources":["img/1111.png","templates/templateHome.js","templates/templateAbout.js","templates/templateForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","templateHome","react_default","a","createElement","Fragment","className","Component","templateAbout","templateForm","App","react_router_dom","to","exact","activeClassName","src","logo","alt","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8QCwBzBC,gMAjBX,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACfJ,EAAAC,EAAAC,cAAA,6DACAF,EAAAC,EAAAC,cAAA,kHAEAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACfJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,QAAlB,YACAJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAAlB,WACAJ,EAAAC,EAAAC,cAAA,sCAXmBG,cCOZC,mLARX,OACEN,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,2BAJoBG,aCUbE,mLARX,OACEP,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,gCAJmBG,sCC8BZG,MArBf,WACE,OACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAChBJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAASC,GAAG,uBAAuBC,OAAK,EAACC,gBAAgB,UAASZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKC,IAAMC,IAAI,eAMxFf,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,KAAK,uBAAuBN,OAAK,EAACO,UAAWnB,IACpDC,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,KAAK,6BAA6BC,UAAWZ,IACpDN,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,KAAK,kCAAkCC,UAAWX,QCb/CY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2496c44b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1111.4446993d.png\";","import React, { Component } from 'react';\r\nimport './templateHome.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import { faArrowCircleDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass templateHome extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"happyTalk\">\r\n        <h4>Mas de mil mujeres y compañías nos avalan</h4>\r\n        <h1>Conectamos talento femenino con las mejores compañías que tienen ofertas flexibles para ellas</h1>\r\n        </div>\r\n        <div className=\"call2Action\">\r\n        <button className=\"join\">Únete</button>\r\n        <button className=\"enter\">Ingresa</button>\r\n        <span>Conoce más</span>\r\n        {/* <FontAwesomeIcon icon=\"faArrowCircleDown\" /> */}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default templateHome;\r\n","import React, { Component } from 'react';\r\n\r\nclass templateAbout extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1>About</h1>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default templateAbout;\r\n","import React, { Component } from 'react';\r\n\r\nclass templateForm extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Formulario</h1>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default templateForm;\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router, Route, Switch, NavLink,\r\n} from 'react-router-dom';\r\nimport templateHome from './templates/templateHome';\r\nimport templateAbout from './templates/templateAbout';\r\nimport templateForm from './templates/templateForm';\r\nimport './App.css';\r\nimport logo from './img/1111.png';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <header className=\"navbar\">\r\n        <NavLink to=\"/SCL008-ProyectoMoms\" exact activeClassName=\"active\"><img src={logo} alt=\"MomsLogo\" /></NavLink>\r\n        {/* <ul>\r\n          <li></li>\r\n          <li><NavLink to=\"/SCL008-ProyectoMoms/about\" exact activeClassName=\"active\">About</NavLink></li>\r\n        </ul> */}\r\n      </header>\r\n      <main>\r\n        <Switch>\r\n          <Route path=\"/SCL008-ProyectoMoms\" exact component={templateHome} />\r\n          <Route path=\"/SCL008-ProyectoMoms/about\" component={templateAbout} />\r\n          <Route path=\"/SCL008-ProyectoMoms/formulario\" component={templateForm} />\r\n        </Switch>\r\n      </main>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}